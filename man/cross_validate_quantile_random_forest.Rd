% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setup.R
\name{cross_validate_quantile_random_forest}
\alias{cross_validate_quantile_random_forest}
\title{Performs a full-cross validation where it splits all the runs in \code{total_data}
into a set of groups, uses all but one group as \code{training_runs} in
\code{fit_quantile_random_forest} and the last group as \code{target_runs}. Then repeats for all groups.
Finally it collects performance and predictivity to get a good handle on identification and estimation quality}
\usage{
cross_validate_quantile_random_forest(
  total_data,
  ngroup = 5,
  parameter_colnames,
  summary_statistics_colnames,
  cv_seed = 0
)
}
\arguments{
\item{total_data}{A data.frame where each row represents a separate simulation run. The data.frame ought to
contain both the summary statistics (output of the model) and the parameters that generated them.}

\item{ngroup}{Number of groups to split the total data in when cross-validating. Defaults to 5}

\item{parameter_colnames}{The name of the columns in the training_runs data.frame that represent the parameters (inputs) of the
simulation model}

\item{summary_statistics_colnames}{The name of the columns in the training_runs data.frame that represent the summary statistics
(outputs) of the simulation model}

\item{cv_seed}{random seed controlling how CV groups are formed: keep it constant to compare cross-validations across methods}
}
\value{
A list containing the basic estimation results
 \itemize{
  \item performance: 1 - the ratio of out-of-sample RMSE of the \code{fit_quantile_random_forest} and RMSE of just using the average (named vector of length equal to the number of parameters)
  \item predictivity: 1 - sum of squared residuals of the \code{fit_quantile_random_forest} and sum of squared residuals when using just the average value (named vector of length equal to the number of parameters)
  \item rmse - Average out of sample RMSE for all the groups in the CV  (named vector of length equal to the number of parameters)
  \item contained - The out-of-sample percentage of times the real parameters are contained in the estimated interval;
  \item interval_size - The average range between lower and upper bound of the prediction intervals for each parameter, i.e. how wide our confidence bounds are on average (named vector of length equal to the number of parameters)
  \item results list of \code{fit_quantile_random_forest} results, one for each CV group
  \item out_of_sample_errors a tidy data-frame containing for each row an out-of-sample prediction and error made for one parameter; useful for debugging
}
}
\description{
Performs a full-cross validation where it splits all the runs in \code{total_data}
into a set of groups, uses all but one group as \code{training_runs} in
\code{fit_quantile_random_forest} and the last group as \code{target_runs}. Then repeats for all groups.
Finally it collects performance and predictivity to get a good handle on identification and estimation quality
}
\examples{
##generate some fake data where paramone,paramtwo ---> ssone,sswto;
## notice that paramtwo is basically unidentifiable!
paramone<-rnorm(n=5000)
paramtwo<-runif(n=5000,min=2,max=5)
ssone<-2*paramone + rnorm(n=5000)
sstwo<- paramone/paramtwo  + rnorm(n=5000)
training_data<-
  data.frame(
    paramone,
    paramtwo,
    ssone,
    sstwo
  )
### or simply do a full cross-validation
cv_results<-cross_validate_quantile_random_forest(training_data,ngroup = 5,
                              parameter_colnames = c("paramone","paramtwo"),
                              summary_statistics_colnames = c("ssone","sstwo"))

## if we look at performance we can see that paramone has been identified and paramtwo has not:
## (in the paper I use either 0.1 or 0.3 as minimum performance below which you just didn't identify the parameter)
cv_results$performance
## different numbers but same story looking at predictivity
cv_results$predictivity
## however it looks like coverage is almost perfect (the 95\% interval contains out-of-sample the real parameters 94.X\% of the time)
cv_results$contained
}
