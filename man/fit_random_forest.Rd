% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/setup.R
\name{fit_random_forest}
\alias{fit_random_forest}
\title{Tries to estimate the parameters through a classic random forest and using bootstrapped residuals + infinitesimal jacknife standard error
to build prediction intervals. Internally it uses caret and ranger packages for some self-calibration.}
\usage{
fit_random_forest(
  training_runs,
  target_runs,
  parameter_colnames,
  summary_statistics_colnames,
  fast = FALSE
)
}
\arguments{
\item{training_runs}{A data.frame where each row represents a separate simulation run. The data.frame ought to
contain both the summary statistics (output of the model) and the parameters that generated them.}

\item{target_runs}{The "real" summary statistics for which we are trying to estimate which parameters generated them.
Target runs can be a data.frame with one or more rows of summary statistics and optionally also the generating parameters if we
are testing the estimation method. Alternatively a vector of length equal to the number of summary statistics}

\item{parameter_colnames}{The name of the columns in the training_runs data.frame that represent the parameters (inputs) of the
simulation model}

\item{summary_statistics_colnames}{The name of the columns in the training_runs data.frame that represent the summary statistics
(outputs) of the simulation model}

\item{fast}{when set to true the fitting will not try to find the best hyper-parameters through the \code{caret} package and will
instead use the default \code{ranger} parameters. This is FALSE by default to replicate the paper's result, but in my experience
setting it to TRUE speeds up the process tenfold for a minor hit in performance.}
}
\value{
A list containing the basic estimation results
#' \itemize{
  \item predictions - The estimated values for each parameter (data.frame with as many rows as in \code{target_runs})
  \item lows - Estimated lower bound (2.5th quantile) for each estimated parameter (data.frame with as many rows as in \code{target_runs})
  \item highs - Estimated upper bound (97.5th quantile) for each estimated parameter (data.frame with as many rows as in \code{target_runs})
  \item prediction_residuals - Difference between "real" parameters and estimated ones for each row in the \code{target_runs};
  if target_runs didn't come with parameters, then only NAs are shown (data.frame with as many rows as in \code{target_runs})
  \item rmse - The root mean square error of the estimated parameter compared to the real one; only computed if target_runs also
  provided the real parameters otherwise NAs (named vector of length equal to the number of parameters)
  \item contained - The percentage of times the real parameters are contained in the estimated interval; NA if \code{target_runs}
  doesn't provide the real parameters (named vector of length equal to the number of parameters)
}
}
\description{
Tries to estimate the parameters through a classic random forest and using bootstrapped residuals + infinitesimal jacknife standard error
to build prediction intervals. Internally it uses caret and ranger packages for some self-calibration.
}
\examples{
##generate some fake data where paramone,paramtwo ---> ssone,sswto;
## notice that paramtwo is basically unidentifiable!
paramone<-rnorm(n=5000)
paramtwo<-runif(n=5000,min=2,max=5)
ssone<-2*paramone + rnorm(n=5000)
sstwo<- paramone/paramtwo  + rnorm(n=5000)
training_data<-
  data.frame(
    paramone,
    paramtwo,
    ssone,
    sstwo
  )
  ## this would be the "real" data, what we want to estimate our model with!
testing_data<-data.frame(
  ssone=2,
 sstwo=0.25
)


### classic arguments: a data.frame for training and one for testing plus the column names

## you can fit just a vector of summary statistics (still need to provide the names though)
fit_random_forest(training_runs = training_data,
                     target_runs =  c(2,1),
                     parameter_colnames = c("paramone","paramtwo"),
                     summary_statistics_colnames = c("ssone","sstwo"),fast=FALSE)
## if you feed a full data.frame, especially with parameters included, you get error and coverage stuff
fit_random_forest(training_runs = training_data,
                     target_runs =  training_data,
                     parameter_colnames = c("paramone","paramtwo"),
                     summary_statistics_colnames = c("ssone","sstwo"),fast=FALSE)
}
