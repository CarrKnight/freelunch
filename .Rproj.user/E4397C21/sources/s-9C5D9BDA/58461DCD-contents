load_all("R/setup.R")


paramone<-rnorm(n=5000)
paramtwo<-runif(n=5000,min=2,max=5)
ssone<-2*paramone + rnorm(n=5000)
sstwo<- paramone/paramtwo  + rnorm(n=5000)
training_data<-
  data.frame(
    paramone,
    paramtwo,
    ssone,
    sstwo
  )
testing_data<-data.frame(
  ssone=2,
  sstwo=0.25
)

################# LINEAR REGRESSION

### classic arguments: a data.frame for training and one for testing plus the column names
fit_linear_regression(training_runs = training_data,
                      target_runs =  testing_data,
                      parameter_colnames = c("paramone","paramtwo"),
                      summary_statistics_colnames = c("ssone","sstwo"))

## you can fit just a vector of summary statistics (still need to provide the names though)
fit_linear_regression(training_runs = training_data,
                      target_runs =  c(2,1),
                      parameter_colnames = c("paramone","paramtwo"),
                      summary_statistics_colnames = c("ssone","sstwo"))
## if you feed a full data.frame, especially with parameters included, you get error and coverage stuff
fit_linear_regression(training_runs = training_data,
                      target_runs =  training_data,
                      parameter_colnames = c("paramone","paramtwo"),
                      summary_statistics_colnames = c("ssone","sstwo"))

### or simply do a full cross-validation
cv_results<-cross_validate_lm(training_data,ngroup = 5,
                  parameter_colnames = c("paramone","paramtwo"),
                  summary_statistics_colnames = c("ssone","sstwo"))



################## GAM

### classic arguments: a data.frame for training and one for testing plus the column names
fit_gam(training_runs = training_data,
                      target_runs =  testing_data,
                      parameter_colnames = c("paramone","paramtwo"),
                      summary_statistics_colnames = c("ssone","sstwo"))

## you can fit just a vector of summary statistics (still need to provide the names though)
fit_gam(training_runs = training_data,
                      target_runs =  c(2,1),
                      parameter_colnames = c("paramone","paramtwo"),
                      summary_statistics_colnames = c("ssone","sstwo"))
## if you feed a full data.frame, especially with parameters included, you get error and coverage stuff
fit_gam(training_runs = training_data,
                      target_runs =  training_data,
                      parameter_colnames = c("paramone","paramtwo"),
                      summary_statistics_colnames = c("ssone","sstwo"))

cross_validate_gam(training_data,ngroup = 5,
                  parameter_colnames = c("paramone","paramtwo"),
                  summary_statistics_colnames = c("ssone","sstwo"))

################## RF


### classic arguments: a data.frame for training and one for testing plus the column names
fit_random_forest(training_runs = training_data,
        target_runs =  testing_data,
        parameter_colnames = c("paramone","paramtwo"),
        summary_statistics_colnames = c("ssone","sstwo"))

## you can fit just a vector of summary statistics (still need to provide the names though)
fit_random_forest(training_runs = training_data,
        target_runs =  c(2,1),
        parameter_colnames = c("paramone","paramtwo"),
        summary_statistics_colnames = c("ssone","sstwo"))
## if you feed a full data.frame, especially with parameters included, you get error and coverage stuff
fit_random_forest(training_runs = training_data,
        target_runs =  training_data,
        parameter_colnames = c("paramone","paramtwo"),
        summary_statistics_colnames = c("ssone","sstwo"))

cross_validate_random_forest(training_data,ngroup = 5,
                   parameter_colnames = c("paramone","paramtwo"),
                   summary_statistics_colnames = c("ssone","sstwo"))

################### QUANTILE_RF


### classic arguments: a data.frame for training and one for testing plus the column names
fit_quantile_random_forest(training_runs = training_data,
                  target_runs =  testing_data,
                  parameter_colnames = c("paramone","paramtwo"),
                  summary_statistics_colnames = c("ssone","sstwo"))

## you can fit just a vector of summary statistics (still need to provide the names though)
fit_quantile_random_forest(training_runs = training_data,
                  target_runs =  c(2,1),
                  parameter_colnames = c("paramone","paramtwo"),
                  summary_statistics_colnames = c("ssone","sstwo"))
## if you feed a full data.frame, especially with parameters included, you get error and coverage stuff
fit_quantile_random_forest(training_runs = training_data,
                  target_runs =  training_data,
                  parameter_colnames = c("paramone","paramtwo"),
                  summary_statistics_colnames = c("ssone","sstwo"))

cross_validate_quantile_random_forest(training_data,ngroup = 5,
                             parameter_colnames = c("paramone","paramtwo"),
                             summary_statistics_colnames = c("ssone","sstwo"))

###################### REJECTION ABC

fit_rejection_abc(training_runs = training_data,
                  target_runs =  testing_data,
                  parameter_colnames = c("paramone","paramtwo"),
                  summary_statistics_colnames = c("ssone","sstwo")
                  )

fit_rejection_abc(training_runs = training_data,
                  target_runs =  c(2,0.25),
                  parameter_colnames = c("paramone","paramtwo"),
                  summary_statistics_colnames = c("ssone","sstwo")
)


fit_rejection_abc(training_runs = training_data,
                  target_runs =  training_data,
                  parameter_colnames = c("paramone","paramtwo"),
                  summary_statistics_colnames = c("ssone","sstwo")
)

cross_validate_rejection_abc(training_data,ngroup = 5,
                   parameter_colnames = c("paramone","paramtwo"),
                   summary_statistics_colnames = c("ssone","sstwo"))


#################### SEMIAUTO REJECTION ABC


fit_semiauto_abc(training_runs = training_data,
                 target_runs =  testing_data,
                 parameter_colnames = c("paramone","paramtwo"),
                 summary_statistics_colnames = c("ssone","sstwo"),
                 degree = 1)

fit_semiauto_abc(training_runs = training_data,
                 target_runs =  c(2,1),
                 parameter_colnames = c("paramone","paramtwo"),
                 summary_statistics_colnames = c("ssone","sstwo"),
                 degree = 4)
fit_semiauto_abc(training_runs = training_data,
                 target_runs =  training_data,
                 parameter_colnames = c("paramone","paramtwo"),
                 summary_statistics_colnames = c("ssone","sstwo"),
                 degree = 4)

cross_validate_semiauto_abc(training_data,ngroup = 5,degree=2,
                             parameter_colnames = c("paramone","paramtwo"),
                             summary_statistics_colnames = c("ssone","sstwo"))


#################### NEURALNET REJECTION ABC

fit_neural_network_abc(training_runs = training_data,
                 target_runs =  testing_data,
                 parameter_colnames = c("paramone","paramtwo"),
                 summary_statistics_colnames = c("ssone","sstwo"))

fit_neural_network_abc(training_runs = training_data,
                 target_runs =  c(2,1),
                 parameter_colnames = c("paramone","paramtwo"),
                 summary_statistics_colnames = c("ssone","sstwo"))
fit_neural_network_abc(training_runs = training_data,
                 target_runs =  training_data,
                 parameter_colnames = c("paramone","paramtwo"),
                 summary_statistics_colnames = c("ssone","sstwo"))

cross_validate_neural_network_abc(training_data,ngroup = 5,degree=2,
                            parameter_colnames = c("paramone","paramtwo"),
                            summary_statistics_colnames = c("ssone","sstwo"))



#################### LOCALLINEAR REJECTION ABC

fit_loclinear_abc(training_runs = training_data,
                       target_runs =  testing_data,
                       parameter_colnames = c("paramone","paramtwo"),
                       summary_statistics_colnames = c("ssone","sstwo"))

fit_loclinear_abc(training_runs = training_data,
                       target_runs =  c(2,1),
                       parameter_colnames = c("paramone","paramtwo"),
                       summary_statistics_colnames = c("ssone","sstwo"))
fit_loclinear_abc(training_runs = training_data,
                       target_runs =  training_data,
                       parameter_colnames = c("paramone","paramtwo"),
                       summary_statistics_colnames = c("ssone","sstwo"))

cross_validate_loclinear_abc(training_data,ngroup = 5,degree=2,
                                  parameter_colnames = c("paramone","paramtwo"),
                                  summary_statistics_colnames = c("ssone","sstwo"))


###############################################
### average fit
average_fit(training_runs = training_data,
            target_runs =  training_data,
            parameter_colnames = c("paramone","paramtwo"),
            summary_statistics_colnames = c("ssone","sstwo"))




predict(lm(paramone~ssone),newdata = data.frame(ssone=2),interval="prediction")

randomForest_caretboot_fit(training_set = training_data,
                 testing_set =  testing_data,
                 parameter_colnames = "paramone",
                 x_names = "ssone")

